GSIP Mediator User Guide
========================
Eric Boisvert <eric.boisvert2@canada.ca>
v1.0, April 2018:
First version

Introduction
------------

The GSIP mediator service is a simple LOD (Linked Open Data) resolution
service for persistent identifiers.  Its role it to provide a description of a
Non-Information URI (URI that represents "things" as an hypermedia document (HTML, RDF/XML, TTL and JSON-LD)
linking this resource to information resources (actual document) in various
formats and links to other non-information resources.

GSIP stands for Groundwater Surface water Interoperability Pilot.  (TODO: maybe
the application should be rename `gclod` or something like this). This application implements the Linked Open Data architecture designed for this project.

== GSIP service

The GSIP LOD architecture recognises three kinds of resources :

* `Things`, or "real world things", are also named "Non-information Resource" because it's not about information, but about something that exists in the real world.
* `Information` which is a document describing the real world `thing`.
* `representation` of this real world thing: a picture, a document, a dataset, etc.

GSIP is a service that provides access to a catalog of `things` and return `information` about them.
The catalog contains essentially two kind of information:

  * relations between `things` and other `things`
	* relations between `things` and their `representations`

== URI

All resources (`thing`, `information`, `representation`) are resources identified on the web using a URI (https://en.wikipedia.org/wiki/Uniform_Resource_Identifier[Uniform Resource Identifier]).
A URI is both an identifier and a location (making them URL : Universal Resource Locator), which can be used to access a representation from the web.

=== Things

By convention, `things` URI are structured as such

`http(s)://{domain}/id/{category}/{item}`

`/id/` is not a requirement to represent `things`, but it a mandatory syntax for GSIP with the current architecture.  the presence of `/id/` tells GSIP that this resources is a `thing``.
This is a functional decision to efficiently manage request to the GSIP service. See <<Annex A : Change URI pattern>> to modify the default URI patterns.

==== Example

A real world catchment is assigned a GSIP URI

https://geoconnex.ca/id/catchment/02OJ*CE

This URI represents a `thing`.  It is not a document or a dataset, but the real catchment.  If you use this URI in a browser, you obviously won't download the catchment itself.
In GSIP infrastructure, you will be redirected using https://en.wikipedia.org/wiki/HTTP_303[HTTP 303] to an `information` document.

This information resource provided by GSIP has the same URI structure except the `/id/` is replaced by `/info/`.

`http(s)://{domain}/info/{category}/{item}`

eg: https://geoconnex.ca/info/catchment/02OJ*CE

This is something that can actually be downloaded from the web.

=== Info page

The info page is a description of a `thing`.  It provides two categories of information.

* relations between `things` and other `things`
* relations between `things` and their `representations`


=== Representations

Representations are fuzzy concepts.  They are a mixture of "data model" and format.  Many documents on the web can provide information about a real `thing`.  For a catchment, we can find wiki pages, HTML page from a watershed authority, a XML file with relevant data, or a plain text file.
All those documents are *representations*. Representations are often conflated with the concept of format.

In the context of GSIP, a representation equates to an information model.  The same information model (or data model) can be encoded in multiple formats in such as way that each of the format can be converted into another on within the same representation.
In a ideal world, the conversion would be perfect (no information loss), but in reality, not all format have the same expressiveness.  For some format, it's acceptable to assume the same representation if it's a reasonnable subset, or simplification, of the same information model.

For example, a GWML document can be expressed in GML/XML or RDF/TTL without any significant information loss, making them just different format for the same information model.
A HTML redering if the same GML/XML can choose to represent part of the information model, for example, skipping the explicit unit of measure.  It's still the same information set. No new information is added.  Note that transforming the data into some other data, like calculating an average, is not considering "new information".  It's derived information.
A last example is a PNG image of a well log, generated from the data contained in the information set.  The process is destructive as there is no direct way to turn the png back into the original information.  But it's still considered the same "representation" for GSIP because it a view of the same information set.
In a nutshell, all those formats can't be in _contradiction_.

On the other hand, the same catchment describes from two different sources will rarely have the same information set.  They can partially overlap.
A the geometry for a catchment defined from dbpedia will likely be different, properties should be similar, but not identical.  Either not the same precision, or simply because they are defined slightly differently.  They will in most cases be availably in the same formats, but with different information model, or different data content.

A representation will often coincide with a data source (from a single provider) who will tend to derive several formats from the same data.

==== Example

Consider https://geoconnex.ca/id/swmonitoring/WSC_02OJ016, a surface water monitoring station. This has two representations

image::img/rep_02OJ016.png[HTML landing page for a monitoring station]

The first representation is historical data, available in two formats (HTML and GeoJSON) and the other is daily data, available in HTML and plain text.
In this particular case, the data comes from the same source (https://wateroffice.ec.gc.ca), but they are not transformations one of the other.



== Architecture

GSIP is composed of 3 modules.

* The RDF catalog
* The dynamic content generator module (optional)
* The data content negotiation module (optional)

=== RDF catalog

GSIP keeps information about `things` in a RDF catalog.  The catalog is queried using https://en.wikipedia.org/wiki/SPARQL[SPARQL]
GSIP can connect to an external (autonomous) catalog, as long as it exposed a SPARQL endpoint, or use an internal catalog.  The internal catalog is loaded in memory, so this option should not be considered for large registries.

This catalog is specified in the configuration file.

[source,xml]
----
<p:parameter name="gsip">http://localhost:8080/gsip</p:parameter>
----

any value starting by http or https is considered as a SPARQL endpoint. Otherwise, GSIP considers that it is a pointer to a folder containing a collection or TTL files constituing the database content, which be loaded when the service is started.

[source,xml]
----
<p:parameter name="triplestore">/repos/gsip</p:parameter>
----

Another option is to use pseudo protocol `webapp:`

[source,xml]
----
<p:parameter name="triplestore">webapp:repos/gsip</p:parameter>
----

`webapp:` is a pseudo protocol tilling GSIP the folder is located in the servlet webapp folder (here `{tomcat application folder}/gsip/webapp/repos/gsip`).

This is useful when the only option to deploy the application and the data is through Tomcat application manager.




== Configuration file

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<p:configuration xmlns:p="urn:x-gsip:1.0">
<!-- defines known types and the extensions that are associated -->
	<p:types>
		<p:type mime-type="application/vnd.geo+json" formats="geojson"/>
		<p:type mime-type="text/csv" formats="csv"/>
		<p:type mime-type="text/xml; subtype=gml/3.2.1" formats="gml"/>
		<p:type mime-type="text/xml" formats="xml"/>
		<p:type mime-type="application/rdf+xml" formats="rdf;rdf+xml"/>
		<p:type mime-type="application/x-turtle" formats="ttl;turtle"/>
		<p:type mime-type="application/json" formats="json"/>
		<p:type mime-type="text/turtle" sameAs="application/x-turtle"/>
		<p:type mime-type="text/plain" formats="txt"/>
		<p:type mime-type="application/vnd.google-earth.kml+xml" formats="kml"/>
	</p:types>
	<p:parameters>
		<p:parameter name="infoTemplate">infohtml.ftl</p:parameter>
		<p:parameter name="baseUri">https://geoconnex.ca</p:parameter>
		<p:parameter name="proxdevuri">http://localhost:8080/gsip</p:parameter>
		<p:parameter name="gsip">http://localhost:8080/gsip</p:parameter>
<!-- 		<p:parameter name="triplestore">http://localhost:8080/fuseki/gsip_file</p:parameter> -->
		<p:parameter name="triplestore">webapp:repos/gsip</p:parameter>
		<p:parameter name="supportedLanguages">en,fr</p:parameter>
		<p:parameter name="defaultLanguage">en</p:parameter>
	</p:parameters>
</p:configuration>
----


== Dynamic content

Mapping tables

.dynamic/conf.xml
[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<p:Templates xmlns:p="urn:x-gsip:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:x-gsip:1.0 ../schemas/DynamicTemplates.xsd ">
  <p:template name="wells" pattern="^https?://.*/id/waterwells/.*$" template="waterwell.ftl" requiresEntry="false"/>
 <p:template name="watershed" pattern="^https?://.*/id/up_watershed/.*$" template="watershed.ftl" requiresEntry="false"/>
  <p:template name="watershed" pattern="^https?://.*/id/waterbody/.*$" template="waterbody.ftl" requiresEntry="false"/>
  <p:template name="catchment" pattern="^https?://.*/id/catchment/.*$" template="catchment.ftl" requiresEntry="false"/>
  <p:template name="swmonitoringq" pattern="^https?://.*/id/swmonitoring/MDDELCC.*$" template="swmonitoringq.ftl" requiresEntry="false"/>
  <p:template name="swmonitoringf" pattern="^https?://.*/id/swmonitoring/WSC.*$" template="swmonitoringf.ftl" requiresEntry="false"/>
  <p:template name="wellcatch" pattern="^https?://.*/id/featureCollection/wellsIn.*$" template="wellcatch.ftl" requiresEntry="false"/>
  <p:template name="aquifer" pattern="^https?://.*/id/hydrogeounits/.*$" template="aquifer.ftl" requiresEntry="false"/>
</p:Templates>
----



.aquifer.ftl
----
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dct: <http://purl.org/dc/terms/>.
<${resource}>
rdfs:seeAlso <${baseUri}/data/aquifer/gwml/gwml/GIN/${p2}>;
<http://schema.org/name> "${p2}".
<${baseUri}/data/aquifer/gwml/gwml/GIN/${p2}>
	dct:format "text/html","application/vnd.geo+json".
<#if hasStatements == 'false'>
<${resource}> rdfs:label "${p2}".
</#if>
----

The template uses FreeMarker (https://freemarker.apache.org/)

== Data content negotiation

This module manages the access to representations.    Depending of you data sources, you might or might not need to configure this module.  A representation is accessed through a URI and one might choose to point directly to the data source on a remote system.
However, remote system rarely implement proper content negotiation, and remote system are notoriously heterogenous.  This system, first and foremost, harmonize access to remote service.  It also deals with CORS (Cross Origin Resource Sharing) and HTTPS/HTTP mixed environments.

* provides a "clean" URL path by removing web services parameters, (rephrase)
* provides a "reverse proxy" to deal with CORS and HTTPS/HTTP mix
* provides proper content negotiation over multiple formats
* provides an harmonised GET override

=== Harmonized GET override



=== Configuration


[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<p:data xmlns:p="urn:x-gsip:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:x-gsip:1.0 file:///C:/java64_8/gsip/WebContent/schemas/data.xsd">
	<!--  each elements are parsed into p1 to p{n}.  p0 = "data/x/y/z.." -->
	<p:match pattern="aquifer/gwml/gwml/GIN/.*">
		<p:mime-type>text/html</p:mime-type>
		<!--  can have more -->
		<p:source header="Accept:text/html">http://gin.gw-info.net/service/api_ngwds:gin2/en/data/standard.hydrogeologicunit.html?ID=${p5?replace("Richelieu","")}</p:source>
	</p:match>
	<p:match pattern="aquifer/gwml/gwml/GIN/.*">
		<p:mime-type>application/vnd.geo+json</p:mime-type>
		<p:source>${gsip}/resources/aq/${p5?replace("Richelieu","aq")}</p:source>
	</p:match>
</p:data>
----


= Annex A : Change URI pattern

The service use Jersey to handle endpoint, therefore it's simply a matter of changing `@Path` annotation to change the URI pattern.
[source,java]
----
package nrcan.lms.gsc.gsip;
// ...
@Path("/id/{seg:.*}")
public class NonInformationUri {
----

If your configure the web server (Apache modrewrite), you also need to change that accordingly
